# The if statement works as in other C-style languages

print("");
print("--------IF--------");
print("");

void bug check(a) {
    if (a == 1) {
        print("a equals 1");
    } elif (a == 2) {
        print("a equals 2");
    } elif (a == 3) {
        print("a equals 3");
    } else {
        print("a is unknown");
    }
}

num a = 1;
check(a);
now a = 3;
check(a);
now a = 5;
check(a);

# While in SHEL works exactly as you'd expect if coming from any C-style language.
# The body of the statement is evaluated every time the conditional in
# parentheses evaluates to true.

print("");
print("--------WHILE--------");
print("");

while (a <= 5) {
    print("a is %", a);
    now a = a + 1;
}

# Loops in SHEL work over a closed range,
# that is to say that both end values are included.
# idx is a special variable that is injected into the
# scope of the body of the loop, and it provides the current
# iteration index of the loop.
print("");
print("--------FROM TO--------");

from 0 to 5 step 1 {
    print("");
    print("Outer loop idx is %", idx);

    # If you want to access this value from inside an inner loop,
    # simply assign it to a variable before and access that.
    num i = idx;

    from 10 to 5 step -1 {
        print("Inner loop idx is %", idx);
    }
}
